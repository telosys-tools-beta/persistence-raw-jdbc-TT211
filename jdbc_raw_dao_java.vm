/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
##--------------------------------------------------------------------------------------------------------
## Key fields = fields in Primary Key    
#set( $keyFields = $entity.getAttributesByCriteria( $const.KEY ) )
##--------------------------------------------------------------------------------------------------------
## Data fields = fields not in Primary Key and not in selected Links    
## #set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $fieldsLink = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
## Mapped fields = fields in Primary Key or not in selected Links    
#set( $allMappedFields = $fn.concatLists($entity.keyAttributes, $dataFields) )
##--------------------------------------------------------------------------------------------------------
package ${target.javaPackageFromFolder($SRC)};

#*
#foreach( $import in $java.imports($entity.attributes) )
import $import;
#end
*#
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.sql.DataSource;

import ${ENTITY_PKG}.${entity.name};

public class ${entity.name}RawDAO {

#set( $jdbc = $jdbcFactory.getInstance($entity) )
	private final static String SQL_SELECT = 
		"$jdbc.sqlSelect";

	private final static String SQL_INSERT = 
		"$jdbc.sqlInsert";

	private final static String SQL_UPDATE = 
		"$jdbc.sqlUpdate";

	private final static String SQL_DELETE = 
		"$jdbc.sqlDelete";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from ${entity.databaseTable}";

	private final static String SQL_COUNT = 
		"$jdbc.sqlExists";

	private DataSource dataSource;
	 
	public void setDataSource(DataSource dataSource) {
		this.dataSource = dataSource;
	}
	
    //----------------------------------------------------------------------
	public ${entity.name} findByPrimaryKey( $fn.argumentsListWithType( $entity.keyAttributes )){
 
		Connection conn = null;
 
		try {
			conn = dataSource.getConnection();
			PreparedStatement ps = conn.prepareStatement(SQL_SELECT);
			// Set the PRIMARY KEY 
			int i = 1 ;
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
			ps.$jdbc.preparedStatementSetter($attribute)(i++, $attribute.name ); // "$attribute.databaseName" : $attribute.fullType 
#end
			${entity.name} $uncapitalizedEntityName = null;
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				$uncapitalizedEntityName = new ${entity.name}();
#foreach( $attribute in $jdbc.attributesForSelect)
				${uncapitalizedEntityName}.${attribute.setter}(rs.$jdbc.resultSetGetter($attribute)("$attribute.databaseName")); // $attribute.fullType
#if ( $attribute.isNumberType() && $attribute.isPrimitiveType() == false )
				if ( rs.wasNull() ) { ${uncapitalizedEntityName}.${attribute.setter}(null); }; // not primitive number => keep null value if any
#end
#end
			}
			rs.close();
			ps.close();
			return $uncapitalizedEntityName;
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			if (conn != null) {
				try {
				conn.close();
				} catch (SQLException e) {}
			}
		}
	}
    //----------------------------------------------------------------------

	public void insert(${entity.name} $uncapitalizedEntityName){
		 
		Connection conn = null;
 
		try {
			conn = dataSource.getConnection();
			PreparedStatement ps = conn.prepareStatement(SQL_INSERT);
			int i=1;
#foreach( $attribute in $jdbc.attributesForInsert )
			ps.$jdbc.preparedStatementSetter($attribute)(i++, $jdbc.valueForPreparedStatement($attribute,${uncapitalizedEntityName}) ); // "$attribute.databaseName" : $attribute.fullType
#end
			ps.executeUpdate();
			ps.close();
 
		} catch (SQLException e) {
			throw new RuntimeException(e);
 
		} finally {
			if (conn != null) {
				try {
					conn.close();
				} catch (SQLException e) {}
			}
		}
	}	

    //----------------------------------------------------------------------

	public int update(${entity.name} $uncapitalizedEntityName){
		int result = 0 ;
		Connection conn = null;
 
		try {
			conn = dataSource.getConnection();
			PreparedStatement ps = conn.prepareStatement(SQL_UPDATE);
			int i=1;
			//--- DATA ( SQL "SET ..." )
#foreach( $attribute in $jdbc.attributesForUpdate )
			ps.$jdbc.preparedStatementSetter($attribute)(i++, $jdbc.valueForPreparedStatement($attribute,${uncapitalizedEntityName}) ); // "$attribute.databaseName" : $attribute.fullType 
#end
			//--- PRIMARY KEY ( SQL "WHERE ..." )
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
			ps.$jdbc.preparedStatementSetter($attribute)(i++, $jdbc.valueForPreparedStatement($attribute,${uncapitalizedEntityName}) ); // "$attribute.databaseName" : $attribute.fullType
#end

			result = ps.executeUpdate();
			ps.close();
 
		} catch (SQLException e) {
			throw new RuntimeException(e);
 
		} finally {
			if (conn != null) {
				try {
					conn.close();
				} catch (SQLException e) {}
			}
		}
		return result ;
	}	

    //----------------------------------------------------------------------

	public int deleteByPrimaryKey( $fn.argumentsListWithType( $entity.keyAttributes )){

		int result = 0 ;
		Connection conn = null;
 
		try {
			conn = dataSource.getConnection();
			PreparedStatement ps = conn.prepareStatement(SQL_DELETE);
			// Set the PRIMARY KEY 
			int i = 1 ;
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
			ps.$jdbc.preparedStatementSetter($attribute)(i++, $attribute.name ); // "$attribute.databaseName" : $attribute.fullType 
#end
			result = ps.executeUpdate();
			ps.close();
 
		} catch (SQLException e) {
			throw new RuntimeException(e);
 
		} finally {
			if (conn != null) {
				try {
					conn.close();
				} catch (SQLException e) {}
			}
		}
		return result ;
	}

    //----------------------------------------------------------------------

	public int delete( ${entity.name} $uncapitalizedEntityName ){

		int result = 0 ;
		Connection conn = null;
 
		try {
			conn = dataSource.getConnection();
			PreparedStatement ps = conn.prepareStatement(SQL_DELETE);
			// Set the PRIMARY KEY 
			int i = 1 ;
			//--- PRIMARY KEY ( SQL "WHERE ..." )
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
			ps.$jdbc.preparedStatementSetter($attribute)(i++, $jdbc.valueForPreparedStatement($attribute,${uncapitalizedEntityName}) ); // "$attribute.databaseName" : $attribute.fullType
#end
			result = ps.executeUpdate();
			ps.close();
 
		} catch (SQLException e) {
			throw new RuntimeException(e);
 
		} finally {
			if (conn != null) {
				try {
					conn.close();
				} catch (SQLException e) {}
			}
		}
		return result ;
	}

    //----------------------------------------------------------------------
	public boolean exists($fn.argumentsListWithType( $entity.keyAttributes )){

		long result = 0 ;
		Connection conn = null;
 
		try {
			conn = dataSource.getConnection();
			PreparedStatement ps = conn.prepareStatement(SQL_COUNT);
			// Set the PRIMARY KEY 
			int i = 1 ;
#foreach( $attribute in $jdbc.attributesForPrimaryKey )
			ps.$jdbc.preparedStatementSetter($attribute)(i++, $attribute.name ); // "$attribute.databaseName" : $attribute.fullType 
#end
			//--- Count
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				result = rs.getLong(1);
			}
			rs.close();
			ps.close();
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			if (conn != null) {
				try {
				conn.close();
				} catch (SQLException e) {}
			}
		}
		return result > 0 ;
	}

    //----------------------------------------------------------------------
	public long countAll(){

		long result = 0 ;
		Connection conn = null;
 
		try {
			conn = dataSource.getConnection();
			PreparedStatement ps = conn.prepareStatement(SQL_COUNT_ALL);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				result = rs.getLong(1);
			}
			rs.close();
			ps.close();
		} catch (SQLException e) {
			throw new RuntimeException(e);
		} finally {
			if (conn != null) {
				try {
				conn.close();
				} catch (SQLException e) {}
			}
		}
		return result ;
	}

}
